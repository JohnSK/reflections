When would you want to create a remote repository rather than keeping all your work local?

I would create a remote repository in most cases as I want to have my files stored on remote servers on GitHub in case I lost the local copies. Another reason is that I can simply share the files stored in remote repository with others.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Pulling changes manually is better option in most cases, because there could be changes or commits that you dont want to pull or have other intentions with them and do not want to share them to public.

Describe the diferences between forks, clones and branches. When would you use one instead of another?

While clones are just a copies of repositories, branches are parts of the repository commit history which includes new features or some experimental changes. Forks are simillar to clones but they are pure GitHub services instead. They are used to create new copies of repositories of other GitHub users, which we have no permission to modify them. The forked repository is accesible to us so we can manage it as our own repository.

What is the benefit of having a copy of the last known state of the remote stored locally?

Having a copy of recent state of remote can help us know, which changes were made to the master by others. Especially, this is one of the best ways to face merging conflicts as we can find the critical part of the content which caused the issue.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I would collaborate using some other version controll tools or services like redmine.org or bitbucket. Even without these I would stay in contact with the team members using some social media or mail communication while facing issues. This way the collaboration would be hard because I would not have such control over the new versions, bugs or new features that other people would make. Using Git it is very easy to manage it.

When would you want to make changes in separate branch rather than directly in master? What benefits does each approach have?

Making changes in separate branch is very efficient way to collaborate with others as I can make something new, like a new feature or fix a bug and then I can test it if it really works before it would get to the main master branch. This way I do not have to bother by screwing up something as it would only involve the separated branch not the master one. One of the benefits of making changes directly in master branch is that it can be done very fast as we do not have to always do the merges, but there is a risk of more conflicts to happen.

